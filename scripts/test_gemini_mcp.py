#!/usr/bin/env python
"""
Test script for the Gemini MCP Tool.
"""

import asyncio
import json
import logging
import sys
import os
from pathlib import Path

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)

logger = logging.getLogger("test_gemini_mcp")

# Mock Gemini tool for testing
class BaseTool:
    """Mock base tool class."""
    
    def validate_params(self, params, required_params):
        """Validate required parameters."""
        missing = [param for param in required_params if param not in params]
        if missing:
            error_msg = f"Missing required parameters: {', '.join(missing)}"
            return False, error_msg
        return True, None

class MockGeminiTool(BaseTool):
    """Mock Gemini tool for testing."""
    
    async def execute(self, params):
        """Execute mock Gemini operations."""
        valid, error = self.validate_params(params, ["operation"])
        if not valid:
            return {"error": error}
        
        operation = params.get("operation", "")
        
        if operation == "generateText":
            return await self._mock_generate_text(params)
        elif operation == "listModels":
            return await self._mock_list_models(params)
        else:
            return {"error": f"Unknown operation: {operation}"}
    
    async def _mock_generate_text(self, params):
        """Mock text generation."""
        valid, error = self.validate_params(params, ["prompt"])
        if not valid:
            return {"error": error}
        
        prompt = params.get("prompt", "")
        model = params.get("model", "gemini-1.5-flash")
        
        logger.info(f"Generating text with model: {model}")
        logger.info(f"Prompt: {prompt}")
        
        # Simulate different responses based on prompt
        if "hello" in prompt.lower():
            text = "Hello! I'm a mock Gemini AI model. How can I assist you today?"
        elif "code" in prompt.lower():
            text = "```python\ndef hello_world():\n    print('Hello, World!')\n\nif __name__ == '__main__':\n    hello_world()\n```"
        elif "explain" in prompt.lower():
            text = "Here's a detailed explanation: Project Chimera is a system that integrates various AI models and tools into a unified framework. It uses MCP (Model Context Protocol) to standardize communication between components."
        else:
            text = f"This is a mock response to your prompt: '{prompt}'. In a real implementation, this would be generated by the Gemini model."
        
        return {
            "text": text,
            "model": model,
            "elapsed_ms": 150,
            "finish_reason": "STOP"
        }
    
    async def _mock_list_models(self, params):
        """Mock listing available models."""
        logger.info("Listing available models")
        
        # Return mock models list
        return {
            "models": [
                {
                    "name": "gemini-1.0-pro",
                    "description": "Versatile text and image understanding, reasoning"
                },
                {
                    "name": "gemini-1.5-pro",
                    "description": "Advanced reasoning, longer context, multimodal capabilities"
                },
                {
                    "name": "gemini-1.5-flash",
                    "description": "Fast, efficient text processing for everyday use cases"
                }
            ]
        }

async def test_generate_text():
    """Test the text generation functionality."""
    tool = MockGeminiTool()
    
    logger.info("\n\nTesting text generation...")
    
    # Test basic text generation
    params = {
        "operation": "generateText",
        "prompt": "Hello, how are you?",
        "model": "gemini-1.5-flash",
        "temperature": 0.7
    }
    
    result = await tool.execute(params)
    logger.info(f"Basic text generation result:\n{json.dumps(result, indent=2)}")
    
    # Test code generation
    params = {
        "operation": "generateText",
        "prompt": "Write code for a hello world program in Python",
        "model": "gemini-1.5-pro"
    }
    
    result = await tool.execute(params)
    logger.info(f"Code generation result:\n{json.dumps(result, indent=2)}")
    
    # Test explanation generation
    params = {
        "operation": "generateText",
        "prompt": "Explain Project Chimera and how it works",
        "model": "gemini-1.0-pro",
        "temperature": 0.2
    }
    
    result = await tool.execute(params)
    logger.info(f"Explanation result:\n{json.dumps(result, indent=2)}")
    
    return result

async def test_list_models():
    """Test the model listing functionality."""
    tool = MockGeminiTool()
    
    logger.info("\n\nTesting model listing...")
    
    params = {
        "operation": "listModels"
    }
    
    result = await tool.execute(params)
    logger.info(f"Available models:\n{json.dumps(result, indent=2)}")
    
    return result

async def test_with_real_api():
    """Test with the real Gemini API if API key is available."""
    api_key = os.environ.get("GOOGLE_API_KEY")
    
    if not api_key:
        logger.warning("No GOOGLE_API_KEY environment variable found. Skipping real API test.")
        return
    
    try:
        # Import required modules
        import google.generativeai as genai
        
        # Configure the API
        genai.configure(api_key=api_key)
        
        logger.info("\n\nTesting with real Gemini API...")
        
        # Create model
        model = genai.GenerativeModel("gemini-1.5-flash")
        
        # Generate content
        config = {
            "temperature": 0.7,
            "max_output_tokens": 256
        }
        
        prompt = "Hello, can you provide a short introduction to AI agents?"
        logger.info(f"Prompt: {prompt}")
        
        response = model.generate_content(
            contents=prompt,
            generation_config=config
        )
        
        if hasattr(response, 'text'):
            text = response.text
            logger.info(f"Real API response:\n{text}")
            
            return {
                "success": True,
                "text": text,
                "model": "gemini-1.5-flash"
            }
        else:
            logger.warning("No valid response from real API")
            return {"success": False, "error": "No valid response"}
            
    except Exception as e:
        logger.exception(f"Error testing with real API: {e}")
        return {"success": False, "error": str(e)}

async def main():
    """Run all tests."""
    await test_generate_text()
    await test_list_models()
    
    # Try testing with real API if available
    await test_with_real_api()

if __name__ == "__main__":
    asyncio.run(main()) 