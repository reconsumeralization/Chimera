"""initial schema

Revision ID: a9a67a4be7b5
Revises: 
Create Date: 2025-04-04 12:59:27.608825

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel


# revision identifiers, used by Alembic.
revision: str = 'a9a67a4be7b5'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Create settings table
    op.create_table('settings',
    sa.Column('key', sa.String(), nullable=False),
    sa.Column('value', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('key')
    )
    op.create_index(op.f('ix_settings_key'), 'settings', ['key'], unique=False)
    
    # Create snapshot_logs table
    op.create_table('snapshot_logs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('snapshot_id', sa.String(), nullable=False),
    sa.Column('timestamp', sa.DateTime(), nullable=False),
    sa.Column('operation', sa.String(), nullable=False),
    sa.Column('user_id', sa.String(), nullable=True),
    sa.Column('workspace_id', sa.String(), nullable=True),
    sa.Column('meta_data', sa.JSON(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_snapshot_logs_snapshot_id'), 'snapshot_logs', ['snapshot_id'], unique=False)
    
    # Create rule_sets table
    op.create_table('rule_sets',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('enabled', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_rule_sets_id'), 'rule_sets', ['id'], unique=False)
    
    # Create rules table
    op.create_table('rules',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('rule_set_id', sa.String(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('condition', sa.String(), nullable=False),
    sa.Column('actions', sa.JSON(), nullable=False),
    sa.Column('enabled', sa.Boolean(), nullable=False),
    sa.Column('priority', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['rule_set_id'], ['rule_sets.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_rules_id'), 'rules', ['id'], unique=False)
    op.create_index(op.f('ix_rules_rule_set_id'), 'rules', ['rule_set_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_rules_rule_set_id'), table_name='rules')
    op.drop_index(op.f('ix_rules_id'), table_name='rules')
    op.drop_table('rules')
    op.drop_index(op.f('ix_rule_sets_id'), table_name='rule_sets')
    op.drop_table('rule_sets')
    op.drop_index(op.f('ix_snapshot_logs_snapshot_id'), table_name='snapshot_logs')
    op.drop_table('snapshot_logs')
    op.drop_index(op.f('ix_settings_key'), table_name='settings')
    op.drop_table('settings')
    # ### end Alembic commands ### 